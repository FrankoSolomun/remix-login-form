{
  "version": 3,
  "sources": ["empty-module:./utils/session.server", "empty-module:./utils/user.server", "../../../app/routes/signup.tsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/signup.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/signup.tsx\");\n  import.meta.hot.lastModified = \"1715444355881.9626\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { sessionStorage } from \"./utils/session.server\";\nimport { useActionData, Link } from \"@remix-run/react\";\nimport { Layout } from \"app/components/layout\";\nimport { Textfield } from \"~/components/textfield\";\nimport React, { useState } from \"react\";\nimport { createUser } from \"./utils/user.server\";\nimport { authenticator } from \"./utils/auth.server\";\nexport const loader = async ({\n  request\n}) => {\n  const user = await authenticator.isAuthenticated(request, {\n    successRedirect: \"/\"\n  });\n  return {\n    user\n  };\n};\nexport const action = async ({\n  request\n}) => {\n  const form = await request.formData();\n  const email = form.get(\"email\");\n  const password = form.get(\"password\");\n  const name = form.get(\"name\");\n  const surname = form.get(\"surname\");\n  const birthdateStr = form.get(\"birthdate\"); // Cast as string or null\n  const address = form.get(\"address\");\n  if (typeof email !== \"string\" || typeof password !== \"string\" || typeof name !== \"string\" || typeof surname !== \"string\" || !birthdateStr || typeof address !== \"string\") {\n    return json({\n      error: \"Invalid Form Data\"\n    }, {\n      status: 400\n    });\n  }\n  const birthdate = new Date(birthdateStr); // Convert string to Date object\n  if (isNaN(birthdate.getTime())) {\n    // Check if the date is valid\n    return json({\n      error: \"Invalid birthdate\"\n    }, {\n      status: 400\n    });\n  }\n\n  // Attempt to create the user\n  const creationResult = await createUser({\n    email,\n    password,\n    name,\n    surname,\n    birthdate,\n    address\n  });\n\n  // Check if the user creation was successful\n  if (\"error\" in creationResult) {\n    // Return the error if user creation failed\n    return json({\n      error: creationResult.error\n    }, {\n      status: 400\n    });\n  }\n\n  // If user creation was successful, retrieve or create a new session\n  const session = await sessionStorage.getSession(request.headers.get(\"Cookie\"));\n\n  // Set the user ID in the session\n  session.set(\"userId\", creationResult.user.id); // Store user identifier in session\n\n  // Commit the session and get the Set-Cookie header\n  const cookie = await sessionStorage.commitSession(session);\n\n  // Return a redirect response with the Set-Cookie header\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": cookie\n    }\n  });\n};\nexport default function Signup() {\n  _s();\n  const actionData = useActionData();\n  const [formData, setFormData] = useState({\n    email: actionData?.fields?.email || \"\",\n    password: actionData?.fields?.password || \"\",\n    name: actionData?.fields?.name || \"\",\n    surname: actionData?.fields?.surname || \"\",\n    birthdate: actionData?.fields?.birthdate || \"\",\n    address: actionData?.fields?.address || \"\"\n  });\n\n  // Handle input change\n  const handleInputChange = (event, field) => {\n    setFormData(form => ({\n      ...form,\n      [field]: event.target.value\n    }));\n  };\n  return <Layout>\n      <div className=\"flex flex-col justify-center items-center h-screen\">\n        <form method=\"POST\" className=\"flex flex-col items-center gap-3\">\n          {actionData?.error && <p className=\"error\">{actionData.error}</p>}\n          <Textfield htmlFor=\"email\" name=\"email\" label=\"Email\" type=\"email\" value={formData.email} onChange={e => handleInputChange(e, \"email\")} />\n          <Textfield htmlFor=\"password\" name=\"password\" label=\"Password\" type=\"password\" value={formData.password} onChange={e => handleInputChange(e, \"password\")} />\n          <Textfield htmlFor=\"name\" name=\"name\" label=\"Name\" type=\"text\" value={formData.name} onChange={e => handleInputChange(e, \"name\")} />\n          <Textfield htmlFor=\"surname\" name=\"surname\" label=\"Surname\" type=\"text\" value={formData.surname} onChange={e => handleInputChange(e, \"surname\")} />\n          <Textfield htmlFor=\"birthdate\" name=\"birthdate\" label=\"Date of birth\" type=\"date\" value={formData.birthdate} onChange={e => handleInputChange(e, \"birthdate\")} />\n          <Textfield htmlFor=\"address\" name=\"address\" label=\"Address\" type=\"text\" value={formData.address} onChange={e => handleInputChange(e, \"address\")} />\n          <button type=\"submit\" name=\"_action\" value=\"register\" className=\"bg-blue-500 text-white p-2 rounded-lg\">\n            Signup\n          </button>\n          <Link to=\"/login\" className=\"text-blue-500\">\n            {\"Already have an account? Login here\"}\n          </Link>\n        </form>\n      </div>\n    </Layout>;\n}\n_s(Signup, \"0ECWWSbZnJKDG3YW2OZqiPr0yKI=\", false, function () {\n  return [useActionData];\n});\n_c = Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
